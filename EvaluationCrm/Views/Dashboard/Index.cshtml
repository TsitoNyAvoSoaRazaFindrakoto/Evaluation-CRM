@model EvaluationCrm.Controllers.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<style>
    .chart-container {
        position: relative;
        height: 300px; /* Hauteur fixe pour le conteneur */
        width: 100%;
    }
</style>

<div class="container-fluid">
    <!-- Date Range Filter -->
    @* <div class="row mb-4"> *@
    @*     <div class="col-md-4"> *@
    @*         <div class="card"> *@
    @*             <div class="card-body"> *@
    @*                 <h5 class="card-title">Filtrer par date</h5> *@
    @*                 <div class="input-group"> *@
    @*                     <input type="date" class="form-control" id="startDate"> *@
    @*                     <span class="input-group-text">à</span> *@
    @*                     <input type="date" class="form-control" id="endDate"> *@
    @*                     <button class="btn btn-primary" id="filterBtn">Filtrer</button> *@
    @*                 </div> *@
    @*             </div> *@
    @*         </div> *@
    @*     </div> *@
    @* </div> *@

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card bg-primary text-white">
                <div class="card-body" onclick="window.location.href='@Url.Action("Index", "Ticket")';" style="cursor: pointer;">
                    <h5 class="card-title">Total Dépenses Tickets</h5>
                    <h2 class="card-text">@Model.TotalTicketExpenses.ToString("C")</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-success text-white">
                <div class="card-body" onclick="window.location.href='@Url.Action("Index", "Lead")';" style="cursor: pointer;">
                    <h5 class="card-title">Total Dépenses Leads</h5>
                    <h2 class="card-text">@Model.TotalLeadExpenses.ToString("C")</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-info text-white">
                <div class="card-body" onclick="window.location.href='@Url.Action("Index","Budget")';" style="cursor: pointer;">
                    <h5 class="card-title">Total Budget</h5>
                    <h2 class="card-text">@Model.TotalBudget.ToString("C")</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Dépenses Tickets par Client</h5>
                    <div class="chart-container">
                        <canvas id="ticketExpensesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Dépenses Leads par Client</h5>
                    <div class="chart-container">
                        <canvas id="leadExpensesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Budget par Client</h5>
                    <div class="chart-container">
                        <canvas id="budgetChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Fonction utilitaire pour vérifier si les données sont vides
        function hasData(data) {
            return data && Object.keys(data).length > 0;
        }

        // Configuration commune pour tous les graphiques
        const commonOptions = {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: {
                    display: true,
                    position: 'right'
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let label = context.label || '';
                            if (label) {
                                label += ': ';
                            }
                            const value = context.parsed;
                            label += new Intl.NumberFormat('fr-FR', { 
                                style: 'currency', 
                                currency: 'MGA' 
                            }).format(value);
                            return label;
                        }
                    }
                }
            }
        };
        

        // Fonction pour créer un graphique avec des données par défaut si nécessaire
        function createChart(ctx, data, label, color,type) {
            if (!hasData(data)) {
                data = {
                    labels: ['Aucune donnée'],
                    datasets: [{
                        label: label,
                        data: [0],
                        backgroundColor: [color.backgroundColor],
                        borderColor: [color.borderColor],
                        borderWidth: 1
                    }]
                };
            }

            return new Chart(ctx, {
                type: type,
                data: data,
                options: commonOptions
            });
        }

        // Préparation des données
        const ticketData = @Json.Serialize(Model.TicketExpensesByCustomer) || {};
        const leadData = @Json.Serialize(Model.LeadExpensesByCustomer) || {};
        const budgetData = @Json.Serialize(Model.BudgetByCustomer) || {};

        // Création des configurations de données avec plusieurs couleurs
        const ticketChartData = hasData(ticketData) ? {
            labels: Object.keys(ticketData),
            datasets: [{
                data: Object.values(ticketData),
                backgroundColor: [
                    'rgba(54, 162, 235, 0.8)',
                    'rgba(75, 192, 192, 0.8)',
                    'rgba(255, 206, 86, 0.8)',
                    'rgba(255, 99, 132, 0.8)',
                    'rgba(153, 102, 255, 0.8)'
                ],
                borderColor: [
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        } : null;

        const leadChartData = hasData(leadData) ? {
            labels: Object.keys(leadData),
            datasets: [{
                data: Object.values(leadData),
                backgroundColor: [
                    'rgba(75, 192, 192, 0.8)',
                    'rgba(255, 99, 132, 0.8)',
                    'rgba(255, 206, 86, 0.8)',
                    'rgba(153, 102, 255, 0.8)',
                    'rgba(54, 162, 235, 0.8)'
                ],
                borderColor: [
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(54, 162, 235, 1)'
                ],
                borderWidth: 1
            }]
        } : null;

        const budgetChartData = hasData(budgetData) ? {
            labels: Object.keys(budgetData),
            datasets: [{
                data: Object.values(budgetData),
                backgroundColor: [
                    'rgba(255, 159, 64, 0.8)',
                    'rgba(255, 99, 132, 0.8)',
                    'rgba(75, 192, 192, 0.8)',
                    'rgba(153, 102, 255, 0.8)',
                    'rgba(255, 206, 86, 0.8)'
                ],
                borderColor: [
                    'rgba(255, 159, 64, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 206, 86, 1)'
                ],
                borderWidth: 1
            }]
        } : null;

        // Initialiser les graphiques une fois que le DOM est chargé
        window.addEventListener('DOMContentLoaded', function() {
            const charts = [
                {
                    id: 'ticketExpensesChart',
                    data: ticketChartData,
                    label: 'Dépenses Tickets',
                    color: {
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        borderColor: 'rgba(54, 162, 235, 1)'
                    },
                    type: 'pie'
                },
                {
                    id: 'leadExpensesChart',
                    data: leadChartData,
                    label: 'Dépenses Leads',
                    color: {
                        backgroundColor: 'rgba(75, 192, 192, 0.8)',
                        borderColor: 'rgba(75, 192, 192, 1)'
                    },
                    type: 'pie'
                },
                {
                    id: 'budgetChart',
                    data: budgetChartData,
                    label: 'Budget',
                    color: {
                        backgroundColor: 'rgba(255, 159, 64, 0.8)',
                        borderColor: 'rgba(255, 159, 64, 1)'
                    },
                    type: 'doughnut'
                }
            ];

            charts.forEach(chart => {
                const ctx = document.getElementById(chart.id);
                if (ctx) {
                    createChart(ctx, chart.data, chart.label, chart.color,chart.type);
                }
            });
        });

        // Gestionnaire du filtre de date
        document.getElementById('filterBtn').addEventListener('click', function() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            if (startDate && endDate) {
                console.log('Filtrage:', startDate, endDate);
            }
        });
    </script>
}